from django.db.models import Max
from django.shortcuts import render
from . models import user_details,user_login,apk_details,user_apk,user_feedback,category_master,training_set,permission_settings,manifest_details
# Create your views here.
def index(request):
    return render(request,'./myapp/index.html')

def about(request):
    return render(request,'./myapp/about.html')

def contact(request):
    return render(request,'./myapp/contact.html')

def admin_login(request):
    if request.method == 'POST':
        uname = request.POST.get('uname')
        passwd = request.POST.get('passwd')

        ul = user_login.objects.filter(uname=uname, password=passwd, utype='admin')

        if len(ul) == 1:
            request.session['user_id'] = ul[0].uname
            context = {'uname': request.session['user_id']}
            return render(request, 'myapp/admin_home.html',
                          context)
        else:
            context = {'msg':'invalid login credentials'}
            return render(request, 'myapp/admin_login.html',context)
    else:
        return render(request, 'myapp/admin_login.html')

def admin_home(request):

    context = {'uname':request.session['user_id']}
    return render(request,'./myapp/admin_home.html',context)

def admin_settings(request):

    context = {'uname':request.session['user_id']}
    return render(request,'./myapp/admin_settings.html',context)

def admin_settings_404(request):

    context = {'uname':request.session['user_id']}
    return render(request,'./myapp/admin_settings_404.html',context)

def admin_changepassword(request):
    if request.method == 'POST':
        uname = request.session['user_id']
        new_password = request.POST.get('new_password')
        current_password = request.POST.get('current_password')
        print("username:::" + uname)
        print("current_password" + str(current_password))

        try:

            ul = user_login.objects.get(uname=uname, password=current_password)

            if ul is not None:
                ul.password = new_password  # change field
                ul.save()
                context = {'msg':'Password Changed'}
                return render(request, './myapp/admin_changepassword.html',context)
            else:
                context = {'msg': 'Password Not Changed'}
                return render(request, './myapp/admin_changepassword.html',context)
        except user_login.DoesNotExist:
            context = {'msg': 'Password Not Changed'}
            return render(request, './myapp/admin_changepassword.html',context)
    else:
        return render(request, './myapp/admin_changepassword.html')


def admin_category_master_add(request):
    if request.method == 'POST':
        category_name = request.POST.get('category_name')
        descp = request.POST.get('descp')
        cm = category_master(category_name=category_name,descp=descp)
        cm.save()
        return render(request, 'myapp/admin_category_master_add.html')

    else:
        return render(request, 'myapp/admin_category_master_add.html')

def admin_category_master_delete(request):
    id = request.GET.get('id')
    print("id="+id)

    nm = category_master.objects.get(id=int(id))
    nm.delete()

    nm_l = category_master.objects.all()
    context ={'category_list':nm_l}
    return render(request,'myapp/admin_category_master_view.html',context)

def admin_category_master_view(request):
    nm_l = category_master.objects.all()
    context ={'category_list':nm_l}
    return render(request,'myapp/admin_category_master_view.html',context)

def admin_permission_settings_add(request):
    if request.method == 'POST':
        permission_descp = request.POST.get('permission_descp')
        permission_class = request.POST.get('permission_class')
        descp = request.POST.get('descp')
        ps = permission_settings(permission_descp=permission_descp,permission_class=permission_class,descp=descp)
        ps.save()
        return render(request, 'myapp/admin_permission_settings_add.html')

    else:
        return render(request, 'myapp/admin_permission_settings_add.html')

def admin_permission_settings_delete(request):
    id = request.GET.get('id')
    print("id="+id)

    nm = permission_settings.objects.get(id=int(id))
    nm.delete()

    nm_l = permission_settings.objects.all()
    context ={'permission_list':nm_l}
    return render(request,'myapp/admin_permission_settings_view.html',context)

def admin_permission_settings_view(request):
    nm_l = permission_settings.objects.all()
    context = {'permission_list': nm_l}
    return render(request, 'myapp/admin_permission_settings_view.html', context)

from datetime import datetime
def admin_training_set_add(request):
    if request.method == 'POST':
        category_id=int(request.POST.get('category_id'))
        file=request.POST.get('file')
        dt = datetime.today().strftime('%Y-%m-%d')
        tm = datetime.today().strftime('%H:%M:%S')


        cm = training_set(category_id=category_id,file=file,dt=dt,tm=tm)
        cm.save()

        nm_l = category_master.objects.all()
        context = {'category_list': nm_l,'msg':'Record Added'}
        return render(request, 'myapp/admin_training_set_add.html',context)

    else:
        nm_l = category_master.objects.all()
        context = {'category_list': nm_l, 'msg': ''}
        return render(request, 'myapp/admin_training_set_add.html', context)

def admin_training_set_delete(request):
    id = request.GET.get('id')
    print("id="+id)

    nm = training_set.objects.get(id=int(id))
    nm.delete()

    nm_l = training_set.objects.all()
    cmd = {}
    for nm in nm_l:
        lb = category_master.objects.get(id=nm.category_id)
        cmd[nm.category_id] = lb.category_name

    context ={'data_list':nm_l,'category_list':cmd,'msg':'Record Deleted'}
    return render(request,'myapp/admin_training_set_view.html',context)

def admin_training_set_view(request):
    nm_l = training_set.objects.all()
    cmd = {}
    for nm in nm_l:
        lb = category_master.objects.get(id=nm.category_id)
        cmd[nm.category_id] = lb.category_name

    context = {'data_list': nm_l, 'category_list': cmd, 'msg': ''}
    return render(request, 'myapp/admin_training_set_view.html', context)

def admin_user_feedback_view(request):

    nm_l = user_feedback.objects.all()
    cmd = {}
    for nm in nm_l:
        ud = user_details.objects.get(user_id=nm.user_id)
        cmd[nm.user_id] = f'{ud.fname} {ud.lname}'


    context = {'message_list': nm_l, 'user_list': cmd}
    return render(request, 'myapp/admin_user_feedback_view.html', context)

def admin_user_details_view(request):
    cm_l = user_details.objects.all()
    context = {'user_list': cm_l}
    return render(request, './myapp/admin_user_details_view.html',context)

########USER#############
def user_login_check(request):
    if request.method == 'POST':
        uname = request.POST.get('uname')
        passwd = request.POST.get('passwd')

        ul = user_login.objects.filter(uname=uname, password=passwd,utype='user')
        print(len(ul))
        if len(ul) == 1:
            request.session['user_id'] = ul[0].id
            request.session['user_name'] = ul[0].uname

            context = {'uname': request.session['user_name']}

            return render(request, 'myapp/user_home.html',context)
        else:
            context={'msg':'Invalid credianliats'}
            return render(request, 'myapp/user_login.html',context)
    else:
        return render(request, 'myapp/user_login.html')

def user_home(request):

    context = {'uname':request.session['user_name']}
    return render(request,'./myapp/user_home.html',context)

def user_details_add(request):
    if request.method == 'POST':

        fname = request.POST.get('fname')
        lname = request.POST.get('lname')
        gender = request.POST.get('gender')
        print(gender)
        addr = request.POST.get('addr')
        pin = request.POST.get('pin')
        email = request.POST.get('email')
        contact = request.POST.get('contact')
        password = request.POST.get('password')
        uname=email
        status = "new"
        ul = user_login.objects.filter(uname=uname,utype='user')
        print(len(ul))
        if len(ul) == 1:
            context = {'msg': 'User Email Should Be Unique Registered'}
            return render(request, 'myapp/user_login.html', context)

        ul = user_login(uname=uname, password=password, utype='user')
        ul.save()
        user_id = user_login.objects.all().aggregate(Max('id'))['id__max']

        ud = user_details(user_id=user_id,fname=fname, lname=lname, gender=gender, addr=addr, pin=pin, contact=contact,
                               status=status,email=email )
        ud.save()

        print(user_id)
        context = {'msg':'User Registered'}
        return render(request, 'myapp/user_login.html',context)

    else:
        return render(request, 'myapp/user_details_add.html')

def user_changepassword(request):
    if request.method == 'POST':
        uname = request.session['user_name']
        new_password = request.POST.get('new_password')
        current_password = request.POST.get('current_password')
        print("username:::" + uname)
        print("current_password" + str(current_password))

        try:

            ul = user_login.objects.get(uname=uname, password=current_password)

            if ul is not None:
                ul.password = new_password  # change field
                ul.save()
                context = {'msg':'Password Changed'}
                return render(request, './myapp/user_changepassword.html',context)
            else:
                context = {'msg': 'Password Not Changed'}
                return render(request, './myapp/user_changepassword.html',context)
        except user_login.DoesNotExist:
            context = {'msg': 'Password Changed'}
            return render(request, './myapp/user_changepassword.html',context)
    else:
        return render(request, './myapp/user_changepassword.html')

def user_settings(request):

    context = {'uname':request.session['user_name']}
    return render(request,'./myapp/user_settings.html',context)

from django.core.files.storage import FileSystemStorage
import subprocess
from project.settings import BASE_DIR
import os
import shutil
def user_user_apk_add(request):
    if request.method == 'POST':
        uploaded_file = request.FILES['document']
        fs = FileSystemStorage()
        file_path = fs.save(uploaded_file.name, uploaded_file)

        user_id = request.session['user_id']

        dt = datetime.today().strftime('%Y-%m-%d')
        tm = datetime.today().strftime('%H:%M:%S')
        status = 'ok'
        cm = user_apk(user_id=int(user_id), file_path=file_path, dt=dt, tm=tm)
        cm.save()
        user_apk_id = user_apk.objects.all().aggregate(Max('id'))['id__max']
        #####################################################
        root_file_path = BASE_DIR + './myapp/static/myapp/media/' + file_path
        bat_file_path = os.path.join(BASE_DIR, 'data/apktool.bat')
        result_file_path = os.path.join(BASE_DIR, 'data/result')
        shutil.rmtree(result_file_path,ignore_errors=True)
        #result_file_path = os.path.join(BASE_DIR, 'data/result')


        #p=subprocess.call(f'{bat_file_path} d -o {result_file_path} -f -r {root_file_path}')

        #subprocess.call([bat_file_path, 'd', f'-o {result_file_path}', f'-r {root_file_path}'])
        permission_obj = training_set.objects.all()
        p = subprocess.Popen(f'{bat_file_path} d -o {result_file_path} -f -r {root_file_path}', stdin=subprocess.PIPE, shell=True)
        p.communicate(input=b'\n')
        listOfFiles = list()
        result_file_path = os.path.join(BASE_DIR, 'data/result/smali/com')
        for (dirpath, dirnames, filenames) in os.walk(result_file_path):
            listOfFiles += [os.path.join(dirpath, file) for file in filenames]
        for elem in listOfFiles:
            print(elem)
            result='clean'
            content = 'none'
            basename ='file'
            for obj in permission_obj:
                basename = os.path.basename(elem)
                content1 = obj.file
                print(content1)
                myfile = open(elem, "rt")  # open lorem.txt for reading text
                contents = myfile.read()  # read the entire file into a string
                myfile.close()
                print(contents.find(content1))
                if contents.find(content1) != -1:
                    result = 'spam'
                    content = content1
                    print(contents.find(content1))
                    apk_obj = apk_details(user_apk_id=user_apk_id, file_name=basename, content=content, result=result)
                    apk_obj.save()
                    break;
                else:
                    result = 'clean'
                    content = content1
                    print(contents.find(content1))
                    apk_obj = apk_details(user_apk_id=user_apk_id, file_name=basename, content=content, result=result)
                    apk_obj.save()
                    break;

        #####################################################

        context={'msg':'Query Submitted'}
        return render(request, 'myapp/user_user_apk_add.html',context)
    else:
        return render(request, 'myapp/user_user_apk_add.html')

from datetime import timedelta


def user_user_apk_delete(request):
    id = request.GET.get('id')
    print("id="+id)
    nm = user_apk.objects.get(id=int(id))
    nm.delete()
    user_id = request.session['user_id']
    nm_l = user_apk.objects.filter(user_id=int(user_id))
    context ={'request_list':nm_l,'msg':'Record deleted'}
    return render(request,'myapp/user_user_apk_view.html',context)

def user_user_apk_view(request):
    user_id = request.session['user_id']
    nm_l = user_apk.objects.filter(user_id=int(user_id))
    context = {'request_list': nm_l, 'msg': ''}
    return render(request, 'myapp/user_user_apk_view.html', context)

def user_apk_details_delete(request):
    id = request.GET.get('id')
    user_apk_id =request.GET.get('user_apk_id')
    print("id="+id)
    nm = apk_details.objects.get(id=int(id))
    nm.delete()
    user_apk_id = request.GET.get('user_apk_id')
    nm_l = apk_details.objects.filter(user_apk_id=int(user_apk_id))
    context ={'request_list':nm_l,'msg':'Record deleted','user_apk_id':user_apk_id}
    return render(request,'myapp/user_apk_details_view.html',context)

def user_apk_details_view(request):
    user_apk_id = request.GET.get('user_apk_id')
    nm_l = apk_details.objects.filter(user_apk_id=int(user_apk_id))
    context = {'request_list': nm_l, 'msg': '', 'user_apk_id': user_apk_id}
    return render(request, 'myapp/user_apk_details_view.html', context)

def user_feedback_add(request):
    if request.method == 'POST':

        dt = datetime.today().strftime('%Y-%m-%d')
        tm = datetime.today().strftime('%H:%M:%S')

        msg = request.POST.get('msg')

        user_id=int(request.session['user_id'])
        ####################
        km = user_feedback(user_id=user_id, msg=msg, dt=dt, tm=tm)
        km.save()
        context = {'msg': 'feedback posted'}
        return render(request, 'myapp/user_feedback_add.html', context)
    else:

        context = {}

        return render(request, 'myapp/user_feedback_add.html',context)

def user_feedback_delete(request):
    id = request.GET.get('id')
    print("id=" + id)

    nm = user_feedback.objects.get(id=int(id))
    nm.delete()
    user_id = int(request.session['user_id'])
    nm_l = user_feedback.objects.filter(user_id=user_id)
    cmd = {}
    for nm in nm_l:
        ud = user_details.objects.get(user_id=nm.user_id)
        cmd[nm.user_id] = f'{ud.fname} {ud.lname}'

    context = {'message_list': nm_l, 'user_list': cmd,'msg':'Deleted'}
    return render(request, 'myapp/user_feedback_view.html', context)

def user_feedback_view(request):
    user_id = int(request.session['user_id'])
    nm_l = user_feedback.objects.filter(user_id=user_id)
    cmd = {}
    for nm in nm_l:
        ud = user_details.objects.get(user_id=nm.user_id)
        cmd[nm.user_id] = f'{ud.fname} {ud.lname}'


    context = {'message_list': nm_l, 'user_list': cmd}
    return render(request, 'myapp/user_feedback_view.html', context)

def user_logout(request):
    try:
        del request.session['user_name']
        del request.session['user_id']
    except:
        return user_login_check(request)
    else:
        return user_login_check(request)

def admin_logout(request):
    try:
        del request.session['user_name']
        del request.session['user_id']
    except:
        return admin_login(request)
    else:
        return admin_login(request)
