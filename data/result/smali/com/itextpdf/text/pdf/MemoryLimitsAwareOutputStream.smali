.class Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;
.super Ljava/io/ByteArrayOutputStream;
.source "MemoryLimitsAwareOutputStream.java"


# static fields
.field private static final DEFAULT_MAX_STREAM_SIZE:I = 0x7ffffff7


# instance fields
.field private maxStreamSize:I


# direct methods
.method public constructor <init>()V
    .locals 1

    .line 1
    invoke-direct {p0}, Ljava/io/ByteArrayOutputStream;-><init>()V

    const v0, 0x7ffffff7

    .line 2
    iput v0, p0, Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;->maxStreamSize:I

    return-void
.end method

.method public constructor <init>(I)V
    .locals 0

    .line 3
    invoke-direct {p0, p1}, Ljava/io/ByteArrayOutputStream;-><init>(I)V

    const p1, 0x7ffffff7

    .line 4
    iput p1, p0, Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;->maxStreamSize:I

    return-void
.end method


# virtual methods
.method public getMaxStreamSize()J
    .locals 2

    .line 1
    iget v0, p0, Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;->maxStreamSize:I

    int-to-long v0, v0

    return-wide v0
.end method

.method public setMaxStreamSize(I)Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;
    .locals 0

    .line 1
    iput p1, p0, Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;->maxStreamSize:I

    return-object p0
.end method

.method public declared-synchronized write([BII)V
    .locals 5

    monitor-enter p0

    if-ltz p2, :cond_5

    .line 1
    :try_start_0
    array-length v0, p1

    if-gt p2, v0, :cond_5

    if-ltz p3, :cond_5

    add-int v0, p2, p3

    array-length v1, p1

    sub-int/2addr v0, v1

    if-gtz v0, :cond_5

    .line 2
    iget v0, p0, Ljava/io/ByteArrayOutputStream;->count:I

    add-int/2addr v0, p3

    if-ltz v0, :cond_4

    .line 3
    iget v1, p0, Lcom/itextpdf/text/pdf/MemoryLimitsAwareOutputStream;->maxStreamSize:I

    if-gt v0, v1, :cond_3

    .line 4
    iget-object v2, p0, Ljava/io/ByteArrayOutputStream;->buf:[B

    array-length v3, v2

    shl-int/lit8 v3, v3, 0x1

    sub-int v4, v3, v0

    if-gez v4, :cond_0

    goto :goto_0

    :cond_0
    move v0, v3

    :goto_0
    if-ltz v0, :cond_2

    sub-int/2addr v0, v1

    if-lez v0, :cond_1

    .line 5
    new-array v0, v1, [B

    .line 6
    array-length v3, v2

    .line 7
    invoke-static {v3, v1}, Ljava/lang/Math;->min(II)I

    move-result v1

    const/4 v3, 0x0

    .line 8
    invoke-static {v2, v3, v0, v3, v1}, Ljava/lang/System;->arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V

    .line 9
    iput-object v0, p0, Ljava/io/ByteArrayOutputStream;->buf:[B

    .line 10
    :cond_1
    invoke-super {p0, p1, p2, p3}, Ljava/io/ByteArrayOutputStream;->write([BII)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 11
    monitor-exit p0

    return-void

    .line 12
    :cond_2
    :try_start_1
    new-instance p1, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;

    const-string p2, "During decompression a single stream occupied more than a maximum integer value. Please check your pdf."

    invoke-direct {p1, p2}, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;-><init>(Ljava/lang/String;)V

    throw p1

    .line 13
    :cond_3
    new-instance p1, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;

    const-string p2, "During decompression a single stream occupied more memory than allowed. Please either check your pdf or increase the allowed multiple decompressed pdf streams maximum size value by setting the appropriate parameter of ReaderProperties\'s MemoryLimitsAwareHandler."

    invoke-direct {p1, p2}, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;-><init>(Ljava/lang/String;)V

    throw p1

    .line 14
    :cond_4
    new-instance p1, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;

    const-string p2, "During decompression a single stream occupied more than a maximum integer value. Please check your pdf."

    invoke-direct {p1, p2}, Lcom/itextpdf/text/pdf/MemoryLimitsAwareException;-><init>(Ljava/lang/String;)V

    throw p1

    .line 15
    :cond_5
    new-instance p1, Ljava/lang/IndexOutOfBoundsException;

    invoke-direct {p1}, Ljava/lang/IndexOutOfBoundsException;-><init>()V

    throw p1
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :catchall_0
    move-exception p1

    monitor-exit p0

    throw p1
.end method
